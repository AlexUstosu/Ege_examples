# from itertools import combinations
#
# comb = list(combinations("ASDF", 2))
# print(comb)
#
# from itertools import permutations
# comb1 = list(permutations("ASDF"))
# #print(comb1)

strings_list = []

# from itertools import product
# comb2 = list(product("ASDF", repeat = 2))
# for tp in comb2:
#     string = "".join(tp)
#     strings_list.append(string)
#     print(string)
# print(comb2)
# print(strings_list)

# #-------------------------------------------------
# list1 = [1,2,3,4,5,6]
# print(list1)
#
# doubles = list()
# for i in list1:
#     doubles.append(i**2)
#
# print(doubles)
#
# squered = list(map(lambda i: i**2,list1))
# print(squered)
# #----------------------------------------------------
# list2 = list()
# for i in list1:
#     if i % 2 == 0:
#         list2.append(i)
# print(list2)
#
# even = list(filter(lambda i: i % 2 == 0, list1))
# print(even)
#
# #---------------------------------------
# mults = 1
# for i in list1:
#     mults *= i
#
# print(mults)
#
# from functools import reduce
#
# mults1 = reduce(lambda x, y: x*y, list1)
# print(mults1)


#P11 - Игорь составляет таблицу кодовых слов для передачи сообщений, каждому
# сообщению соответствует своё кодовое слово.
# В качестве кодовых слов Игорь использует трёхбуквенные слова,
# в которых могут быть только буквы Ш, К, О, Л, А, причём буква
# К появляется ровно 1 раз. Каждая из других допустимых букв может встречаться
# в кодовом слове любое количество раз или не встречаться совсем.
# Сколько различных кодовых слов может использовать Игорь?


# K - 1 либо 2 либо 3 - 3 варианта
# остальные 4^2 = 16
# 16 * 3 = 48

# from itertools import product
#
# pr = list(product("ШКОЛА", repeat = 3))
# print(list(pr))
# k = 0
# for i in pr:
#     if i.count('К') == 1:
#         k += 1
# print(k)


#Р-10.  Маша составляет шестибуквенные слова перестановкой букв слова КАПКАН.
# При этом она избегает слов с двумя подряд одинаковыми буквами.
# Сколько различных кодов может составить Маша?

#6! = 720
#4! = 24 = Н П К А
# Н П К К А = 5! = 60
# Н П А А К = 5! = 60
# 60 - 24 = 36 (KK)
# 60 - 24 = 36 (AA)
# 720 / 4 - 36 - 36 - 24


# from itertools import permutations
#
# word = 'капкан'
# mnoj = {i for i in permutations(word)
#         if i[0] != i[1] and i[1] != i[2]  and i[2] != i[3] and i[3] != i[4]  and i[4] != i[5] }
# print(len(mnoj))
#
#
# from itertools import permutations
#
# variants = set()
# word = 'капкан'
# for p in permutations(word):
#         str1 = ''.join(p)
#         if str1.count('аа') == 0 and str1.count('кк') == 0:
#                 variants.add(str1)
# print(len(variants))
#
#
# from itertools import permutations
#
# mnoj1 = {i for i in permutations('капкан')
#         if ''.join(i).count('аа') + ''.join(i).count('кк') == 0}
# print(len(mnoj1))

#111)	Маша составляет 7-буквенные коды из букв А, Й, С, Б, Е, Р, Г.
# Каждую букву нужно использовать ровно 1 раз, при этом буква Й не м
# ожет стоять на первом месте и перед гласной. Сколько различных кодов может составить Маша?

#112)	Маша составляет 7-буквенные коды из букв В, Е, Н, Т, И, Л, Ь.
# Каждую букву нужно использовать ровно 1 раз, при этом буква Ь не может стоять
# на последнем месте и между гласными. Сколько различных кодов может составить Маша?



#Р-09.  Маша составляет 5-буквенные коды из букв В, У, А, Л, Ь.
# Каждую букву нужно использовать ровно 1 раз, при этом буква Ь не может стоять
# на первом месте и перед гласной. Сколько различных кодов может составить Маша?

# count = 0
# str_input = "вуаль"
#
# for i in str_input:
#         for j in str_input:
#                 for k in str_input:
#                         for l in str_input:
#                                 for m in str_input:
#                                         s = i + j + k + l + m
#                                         for x in s:
#                                                 if s.count(x) != 1:
#                                                         break
#                                                 else:
#                                                         if i.count('ЬУ') == 0 and i.count('ЬА') == 0:
#                                                                 count = count + 1
#
#
#
# from itertools import product
#
# p = product("ВУАЛЬ", repeat = 5)
# s = map(lambda i: ''.join(i),p)
#
#
# count = 0
# for i in s:
#         print(i)
#         if (i.count('В') == 1 and \
#            i.count('У') == 1 and \
#            i.count('А') == 1 and \
#            i.count('Л') == 1 and \
#            i.count('Ь') == 1) and \
#            i[0] != 'Ь' and \
#            i.find('ЬУ') == -1 and \
#            i.find('ЬА') == -1:
#                 count = count + 1
#
# print(count)


#Р-08.  Вася составляет 4-буквенные коды из букв У, Л, Е, Й.
# Каждую букву нужно использовать ровно 1 раз, при этом код не может начинаться
# с буквы Й и не может содержать сочетания ЕУ. Сколько различных кодов может составить Вася?




#Р-07.  Вася составляет 3-буквенные слова, в которых есть только буквы В, Е, С, Н , А,
# причём буква А используется в каждом слове хотя бы 1 раз. Каждая из других
# допустимых букв может встречаться в слове любое количество раз или не встречаться совсем.
# Словом считается любая допустимая последовательность букв, не обязательно осмысленная.
# Сколько существует таких слов, которые может написать Вася?

# 1 подключаем библиотеку
# 2 перестановки
# 3 список или строка
# 4 организуем цикл
# 5 условие
# 6 наращиваем счётчик


#Р-03. Все 4-буквенные слова, составленные из букв К, Л, Р, Т,
# записаны в алфавитном порядке и пронумерованы. Вот начало списка:
# 1. КККК
# 2. КККЛ
# 3. КККР
# 4. КККТ
# ……
# Запишите слово, которое стоит на 67-м месте от начала списка.

from itertools import product

pr = product("КЛРТ", repeat = 4)
listr_pr = list(pr)
print(listr_pr[66])

#Р-02. Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.
# Вот начало списка:
# 1. ААААА
# 2. ААААО
# 3. ААААУ
# 4. АААОА
# ……
# Запишите слово, которое стоит на 240-м месте от начала списка.
# #Р-01. В некоторой стране автомобильный номер длиной 7 символов составляется из заглавных букв (всего используется 26 букв)
# # и десятичных цифр в любом порядке. Каждый символ кодируется одинаковым и минимально возможным количеством бит, а каждый номер
# # – одинаковым и минимально возможным целым количеством байт. Определите объем памяти, необходимый для хранения 20 автомобильных номеров.

from itertools import product, repeat

a = product(sorted("ПОРТ"), repeat = 5)
string_per = map(lambda x: ''.join(x),a)
list_string_per = list(string_per)
print(list_string_per)
k = 0
for i in list_string_per:
    k += 1
    if i == 'ТОПОР':
        print(k)
    if i == 'РОПОТ':
        print(k)


# from itertools import combinations, repeat
#
# combine = list(combinations('AN+', 2))
# print(combine)
#
#
# from itertools import permutations
#
# combine1 = list(permutations('AN+'))
# print(combine1)
#
#
# from itertools import product
#
# combine2 = product('AN+',repeat = 2)
# # for i in combine2:
# #     s_new = "".join(i)
# #     print(s_new)
#
# combine2 = list(map("".join, combine2))
# print(combine2)
from collections.abc import bytes_iterator
#Р-11 (демо-2021).  Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово.
# В качестве кодовых слов Игорь использует трёхбуквенные слова, в которых могут быть только буквы Ш, К, О, Л, А, причём буква
# К появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз
# или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?


# from itertools import product
#
# combine2 = [i for i in product('ШКОЛА',repeat = 3) if i.count('К') == 1]
# print(len(combine2))

# combine2 = product('ШКОЛА',repeat = 3)
# count1 = 0
# for i in combine2:
#     if i.count('К') == 1:
#         count1 += 1
# print(count1)


#Р-03. Все 4-буквенные слова, составленные из букв К, Л, Р, Т, записаны в алфавитном порядке и пронумерованы. Вот начало списка:
# 1. КККК
# 2. КККЛ
# 3. КККР
# 4. КККТ
# Запишите слово, которое стоит на 67-м месте от начала списка

from itertools import product
print(list(product('КЛРТ',repeat = 4))[66])



I = N * K
I - информационный объем
K - число бит на символ
N - количество символов

Q = 2^K

Q = M^N

# Р-12 (ЕГЭ-2024). На предприятии каждой изготовленной детали присваивают серийный номер, состоящий из 261 символов.
# Для его хранения отведено одинаковое и минимально возможное целое число байт. При этом используется посимвольное
# кодирование серийных номеров, все символы кодируются одинаковым и минимально возможным числом бит. Известно,
# что для хранения 252 500 серийных номеров отведено более 31 Мбайт памяти. Определите минимально возможную мощность
# алфавита, из которого составляются серийные номера. В ответе запишите только число.

I = 31 * 1024 * 1024 / 252500 =  128.7.... === 129
128 * 8 = 1024 bit

1024 / 261 = 4

#Р-11 (ЕГЭ-2024). На предприятии каждой изготовленной детали присваивается серийный номер,
# содержащий десятичные цифры и символы из 2030-символьного специального алфавита. В базе данных для
# хранения каждого серийного номера отведено одинаковое и минимально возможное целое число байт. При
# этом используется посимвольное кодирование, все символы кодируются одинаковым и минимально возможным
# числом бит. Известно, что для хранения 318 серийных номеров отведено более 67 Кбайт памяти. Определите
# минимально возможную длину серийного номера. В ответе запишите только целое число.

67 * 1024
215
215 * 8 = 1720
2040 = 2^11


#Р-10 (демо-2021). При регистрации в компьютерной системе каждому объекту сопоставляется
# идентификатор, состоящий из 15 символов и содержащий только символы из 8-символьного набора:
# А, В, C, D, Е, F, G, H. В базе данных для хранения сведений о каждом объекте отведено одинаковое и
# минимально возможное целое число байт. При этом используют посимвольное кодирование идентификаторов,
# все символы кодируют одинаковым и минимально возможным количеством бит. Кроме собственно идентификатора,
# для каждого объекта в системе хранятся дополнительные сведения, для чего отведено 24 байта на один объект.
# Определите объём памяти (в байтах), необходимый для хранения сведений о 20 объектах.
# В ответе запишите только целое число – количество байт.


8 символов = 3 бита
15 * 3 = 45 бит - 64 бит - 6 байт
id + доп инфа = (6 + 24) * 20 = 600


#Р-09. Информационная панель может отображать сообщения, состоящие из 10 цифр,
# причем каждая цифра может быть трёх цветов. Цифры и цвета могут повторяться.
# Контроллер панели выделяет под каждое сообщение одинаковое и минимальное возможное целое число байт.
# При этом используется посимвольное кодирование, все символы сообщения кодируются одинаковым минимально
# возможным количеством бит. Укажите объем памяти в байтах для хранения 100 сообщений.


#Р-08. При регистрации в компьютерной системе каждому пользователю выдаётся пароль, состоящий из 11 символов.
# Из соображений информационной безопасности каждый пароль должен содержать хотя бы 2 десятичных цифры, как прописные,
# так и строчные латинские буквы, а также не менее 2-х символов из 6-символьного набора: «&», «#», «$», «*», «!», «@».
# В базе данных для хранения сведений о каждом пользователе отведено одинаковое и минимально возможное целое число байт.
# При этом используют посимвольное кодирование паролей, все символы кодируют одинаковым и минимально возможным количеством
# бит. Кроме собственно пароля, для каждого пользователя в системе хранятся дополнительные сведения,
# для чего выделено целое число байт; это число одно и то же для всех пользователей. Для хранения сведений
# о 30 пользователях потребовалось 900 байт. Сколько байт выделено для хранения дополнительных сведений об
# одном пользователе? В ответе запишите только целое число – количество байт.

1. 30 байт на пользователя
2. пароль + доп инфа
3. 10 6 26 26 = 68  = 7 бит
4. 7 * 11 = 77 = 10 байт
