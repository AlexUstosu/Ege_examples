'''
Задача предполагает работу с парами чисел, которые:
1. Сгенерированы из диапазона
2. Взяты из файла
'''

#Р-01 (демо-2021). Рассматривается множество целых чисел, принадлежащих числовому отрезку [1016; 7937],
# которые делятся на 3 и не делятся на 7, 17, 19, 27. Найдите количество таких чисел и максимальное из них.
# В ответе запишите два целых числа: сначала количество, затем максимальное число.
# Для выполнения этого задания можно написать программу или воспользоваться редактором электронных таблиц.\

'''Варианты наполнения списка'''
# my_list = []
# for i in range(1016,7937 + 1):
#     my_list.append(i)
# print(my_list)

# genarate_list = [i for i in range(1016,7937 + 1)]
# print(genarate_list)

'''Алгоритм решения задачи'''
# #1 generate list
# my_list = [i for i in range(1016,7937 + 1)]
#
# #2 create result list
# result_list = []
#
# #3 create cycle for
# for i in my_list:
#     #4 create right if
#     if i % 3 == 0 and i % 7 != 0 and i % 17 != 0 and i % 19 != 0 and i % 27 != 0:
#         #5 add elements to result list
#         result_list.append(i)
#
# #6 without cycle use function
# print(f"Count: {len(result_list)}\n\n")
# print(f"Max: {max(result_list)}")

'''Работа с файлами
"C:\\Users\\odmen\\Desktop\\123.txt"

r - read
w - write
rb - read binary
wb
r+ - read/write
rb+
w+ - read/write
a - append
a+
Правила
1. Всё что было открыто должно быть закрыто
2. Путь 
3. Соблюдать режим
'''

# file_123 = open('123.txt','r+')
#
# str_1 = file_123.read()
# print(str_1)
# file_123.close()

'''
Алгоритм
1. Считать значения в файл
1.1. Создать пустой список
1.2. Использовать конструкцию with
1.3. Положить файл в папку проекта
1.4. Написать  имя файла(относительный путь) в функции open
1.5. Поставить режим открытия 
1.6. Организовать цикл для перебора всех строк в файле
1.7. Добавить каждую сроку, переведенную в формат инт в пустой лист
2. Просмотреть пример
3. Организуем главный цикл для перебора
4. Взять пару
5. Написать условие сравнения(отбора)
6. Объявить результирующий список
7.заполнить подходящими значениями
8. Вывести
'''

#______________________________________________________________________________________________________________________
# 150) (В. Шубинкин) В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
# принимать целые значения от -10 000 до 10 000 включительно. Определите и запишите в ответе сначала
# количество пар элементов последовательности, в которых хотя бы одно число делится на 7, а
# другое при этом не делится на 17. Затем - минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# Например, для последовательности -45; 14; 22; -21; 34 ответом будет пара чисел: 3 и -31

# -45 14 ==> -31
# 14 22 ==> 36
# 22 -21 ==> 1
# -21 34 ==> not

# input_list = []
# result_list = []
#
# with open('17-1.txt','r+') as file:
#     for line in file:
#         input_list.append(int(line))
# print(input_list)
#
# for i in range(len(input_list) - 1):
#     number_1 = input_list[i]
#     number_2 = input_list[i + 1]
#
#     if (number_1 % 7 == 0 and number_2 % 17 != 0) or \
#         (number_2 % 7 == 0 and number_1 % 17 != 0):
#         result_list.append(number_1 + number_2)
#
#
# print(f"Count: {len(result_list)}")
# print(f"Min: {min(result_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# input_list = []
# result_list =[]
# with open('17-10.txt', 'r+') as file:
#     for line in file:
#         input_list.append(int(line))
# print(input_list)
#
# for  i  in range(len(input_list)-1):
#     number_1 = input_list[i]
#     number_2 = input_list[i+1]
#
#     summ = number_1 + number_2
#
#     if  summ > 99 and (summ % 100 % 10 > summ % 100 // 10):
#         result_list.append(summ)
#
# print(f"Count: {len(result_list)}")
# print(f"Min: {min(result_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [1529; 9482], которые удовлетворяют следующим условиям:
# − запись в двоичной системе закачивается на 01;
# − запись в пятеричной системе заканчивается на 3.
# Найдите минимальное из таких чисел и их сумму.
# Гарантируется, что искомая сумма не превосходит 107.

#1533 2190194

# A = [i for i in range(1529,9483)]
# #print(A)
# B = list()
#
# for i in A:
#     number_bin = bin(i)[2:]
#     number_5 = ''
#     x = i
#     while i > 0:
#         number_5 += str(i % 5)
#         i //= 5
#     number_5 = number_5[::-1]
#
#     if number_bin[-2:] == '01' and number_5[-1:] == '3':
#         B.append(x)
# print(B)
# print(f'Min: {min(B)}')
# print(f'Sum: {sum(B)}')
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#90)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [12094; 20075], которые удовлетворяют следующим условиям:
# а) Число в шестнадцатеричной записи оканчивается цифрой «F»;
# б) Число делится на 3, но не делится на 8,14,19.
# Найдите сумму таких чисел и их количество. В ответе запишите сначала сумму,
# а потом количество.

# A = [i for i in range(12094,20076)]
# print(A)
# B = list()
#
# for i in A:
#     number_hex = hex(i)[2:]
#     if number_hex[-1:] == 'F':
#         #TODO
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#111)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [10; 6000], которые удовлетворяют следующим условиям:
#а) Запись числа в пятеричной системе счисления содержит только двойки.
#б) Число делится на 6.
#Найдите количество таких чисел и их сумму. В ответе запишите сначала
# количество, а затем сумму.


# A = [i for i in range(10,6001)]
# print(A)
# B = list()
#
# for i in A:
#     number_5 = ''
#     x = i
#     while x > 0:
#         number_5 += str(x % 5)
#         x //= 5
#     number_5 = number_5[::-1]
#     #print(number_5)
#     if len(number_5) == number_5.count('2') and i % 6 == 0:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Sum: {sum(B)}')
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#113)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [777; 19990], которые удовлетворяют следующим условиям:
#а) Максимальная цифра в восьмеричной записи числа равна 6 .
#б) Число делится на 11 или на 13, но не делится на 15.
#Найдите количество таких чисел и разность между максимальным и минимальным числами.
# В ответе запишите сначала количество, а затем разность между максимальным и
# минимальным числами.

# A = [i for i in range(777,19991)]
# print(A)
# B = list()
#
# for i in A:
#     number_8 = oct(i)[2:]
#
#     if number_8.count('6') > 0 and number_8.count('7') == 0 and number_8.count('8') == 0:
#         if (i % 11 == 0 or i % 13 == 0)  and i % 15 != 0:
#             B.append(i)
#
# #TODO
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#118)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [1717; 212121], которые удовлетворяют следующим условиям:
#а) Число в шестнадцатеричной записи оканчивается на A, но при этом не оканчивается на 0A.
#б) Число делится на D16.
#Найдите количество таких чисел и квадрат минимального из них.
# В ответе запишите сначала количество, а затем квадрат минимального числа.

# A = [i for i in range(1717,212121)]
# B = list()
#
# for i in A:
#     number_16 = hex(i)[2:]
#     if number_16[-1:] == 'a' and number_16[-2:] != '0a' and i % 13 == 0:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Min: {min(B)**2}')
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#140)	(В. Шелудько) Рассматривается множество целых чисел, принадлежащих числовому отрезку
# [4413; 10153], которые делятся на 5 и 23 и не делятся на 7, 10 и при этом цифра в
# разряде десятков принадлежит отрезку [1; 3]. Найдите количество таких чисел и
# минимальное из них. В ответе запишите два целых числа: сначала количество,
# затем минимальное число.

# A = [i for i in range(4413,10154)]
# B = list()
#
# for i in A:
#     if i % 100 // 10 in [1, 2, 3]:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Min: {min(B)**2}')

# массив случайных чисел
# элеметов с нечетными индексами

# import random
#
# A = [(random.randint(1, 100)) for i in range(10)]
# print(A)
# for i in range(len(A) / 2):
#     if i % 2 == 0:
#         print(i)
#         A.pop(i)
# print(A)
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#65)	(Е. Джобс) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [8800; 55535], которые удовлетворяют следующим условиям:
# а) произведение разрядов больше 35;
# б) хотя бы один из разрядов равен 7.
# Найдите наибольшее из таких чисел и их количество.

# list=[i for i in range (8800, 55536)]
# new_list=[]
#
# for x in list:
#     mult = 1
#     flag = False
#     for i in str(x):
#         mult *= int(i)
#         if int(i) == 7:
#             flag = True
#     if mult > 35 and flag == True:
#         new_list.append(x)
#
# print(new_list)
# print(new_list[12])
# print(max(new_list))
# print(len(new_list))


    # number = x
    # mult1 = 1
    # while number > 0:
    #     mult1 *= number % 10
    #     number //= 10
    # print(mult1)

#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# 85)	Назовём натуральное число подходящим, если ровно два из его делителей входят
# в список (7, 11, 17, 19). Найдите все подходящие числа,
# принадлежащих отрезку [15 000; 25 000]
# В ответе запишите два целых числа: сначала количество, затем наибольшее число.

# list=[i for i in range (15000, 25001)]
# new_list=[]
# for x in list:
#     if (x%7==0 and x%11==0) or \
#             (x%19==0 and x % 17==0) or \
#             (x%7==0 and x%17==0) or \
#             (x%7==0 and x%19==0) or (x%11==0 and x%19==0) or (x%11==0 and x%17==0):
#         new_list.append(x)
# print (len(new_list))
# print (min(new_list))


# list_nums_1 = list(map(function, list_nums))
# print(list_nums_1)
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# 151)	(В. Шубинкин) В файле 17-1.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от -10 000 до 10 000
# включительно. Определите и запишите в ответе сначала количество пар элементов
# последовательности, в которых хотя бы одно число оканчивается на 6 и делится на 3.
# Затем - минимальное число в паре среди всех таких пар. В данной задаче под парой
# подразумевается два идущих подряд элемента последовательности. Например, для
# последовательности 306; 36; -15; -6; 2; 16 ответом будет пара чисел: 4 и -15.

#my_dict = {'Masha' : "85625", 'Petya' : '56376847'}

#print(my_dict)

# def function(number):
#     if abs(number) % 10 == 6 and abs(number) % 3 == 0:
#         return True
#     return False
#
# list_nums = []
#
# with open('17-1.txt','r') as file:
#      for line in file:
#          list_nums.append(int(line))
#
# print(list_nums)
#
# for i in range(1, len(list_nums)):
#     left = list_nums[i - 1]
#     right = list_nums[i]
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#232)	В файле 17-1.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000
# до 10 000 включительно. Определите количество троек, в которых хотя
# бы один из трёх элементов меньше, чем среднее арифметическое всех
# чисел в файле, и десятичная запись хотя бы одного из трёх элементов
# содержит цифру 8. В ответе запишите два числа: сначала количество
# найденных троек, а затем – максимальную сумму элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента
# последовательности.

# 1 15 89 12 3
# 1 15 89 -
# 15 89 12 -
# 89 12 3 -
#
# list_number = []
# list_pairs = []
# file = open('17-1.txt','r')
# for line in file:
#     list_number.append(int(line))
#
# print(list_number)
# average = sum(list_number) / len(list_number)
# print(average)
#
# for i in range(len(list_number) - 2):
#     number_str = ''
#     right_rools = 0
#     n_1 =   list_number[i]
#     n_2 =   list_number[i + 1]
#     n_3 =   list_number[i + 2]
#
#     if n_1 < average or n_2 < average or n_3 < average:
#         right_rools += 1
#
#     number_str = str(n_1) + str(n_2) + str(n_3)
#     count_3 = number_str.count('8')
#
#     if count_3 > 0:
#         right_rools += 1
#
#     if right_rools == 2:
#         list_pairs.append(n_1 + n_2 + n_3)
#
# print(f"Count: {len(list_pairs)}")
# print(f"Summ max: {max(list_pairs)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#233)	В файле 17-1.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000
# до 10 000 включительно. Определите количество троек, в которых хотя бы
# один из трёх элементов меньше, чем среднее арифметическое всех чисел в
# файле, и десятичная запись хотя бы двух из трёх элементов содержит цифру
# 2. В ответе запишите два числа: сначала количество найденных троек,
# а затем – максимальную сумму элементов таких троек. В данной задаче под
# тройкой подразумевается три идущих подряд элемента последовательности.

#2351 17195


# new_list=[]
# pairs=[]
# with open('17-1.txt','r') as file:
#     for line in file:
#         new_list.append(int(line))
# print(new_list)
#
# average = (sum(new_list)/len(new_list))
# print(average)
#
# for i in range(len(new_list)-2):
#     sum = 0
#     k=0
#     x_1 = new_list[i]
#     x_2 = new_list[i + 1]
#     x_3 = new_list[i + 2]
#
#     if x_1 < average or x_2 < average or x_3 < average:
#         k += 1
#
#     sum = x_1 + x_2 + x_3
#     x_1 =  str(x_1)
#     x_2 =  str(x_2)
#     x_3 =  str(x_3)
#
#     count_1 = x_1.count('2')
#     count_2 = x_2.count('2')
#     count_3 = x_3.count('2')
#     if ((count_1 + count_2) >= 2 and count_1 != 0 and count_2 != 0) or \
#        ((count_1 + count_3) >= 2 and count_1 != 0 and count_3 != 0) or \
#        ((count_2 + count_3) >= 2 and count_2 != 0 and count_3 != 0):
#         k += 1
#     if k == 2:
#         pairs.append(sum)
# print(f"Count: {len(pairs)}")
# print(f"MaxSum: {max(pairs)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# 235)	В файле 17-1.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от –10 000 до
# 10 000 включительно. Определите количество троек, в которых хотя бы два из
# трёх элементов больше, чем среднее арифметическое всех чисел в файле.
# В ответе запишите два числа: сначала количество найденных троек,
# а затем – максимальную сумму элементов таких троек. В данной задаче
# под тройкой подразумевается три идущих подряд элемента последовательности.

# 12 4 5 6 7 0
# 12 4 5
# 4 5 6
# 5 6 7
# 6 7 0

# 12 22 0
# 222222 0 13

#5020 28715

# new_list = []
# pairs = []
# with open ('17-1.txt', 'r') as file:
#     for line in file:
#         new_list.append(int (line))
# print (new_list)
#
#
# average = (sum(new_list) / len(new_list))
# print (average)
#
# for i in range (len(new_list) - 2):
#     x_1 = new_list[i]
#     x_2 = new_list[i + 1]
#     x_3 = new_list[i + 2]
#
#     if (x_1  > average and x_2  > average) or (x_1  > average and x_3  > average) or (x_2  > average and x_3  > average):
#         pairs.append(x_1 + x_2 +x_3)
#
# print(f"Count: {len(pairs)}")
# print(f"MaxSum: {max(pairs)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#317)	(М. Шагитов) В файле 17-316.txt содержится последовательность целых чисел.
# Элементы последовательности – четырёхзначные натуральные числа.
# Назовём два различных четырёхзначных числа неудачной парой,
# если они различаются только цифрами в двух разрядах.
# Найдите все тройки элементов последовательности,
# в которых есть хотя бы одна неудачная пара,
# а сумма всех чисел тройки больше минимальной
# суммы трёх различных элементов последовательности.
# В ответе запишите количество найденных троек,
# затем максимальную из сумм элементов таких троек.
# В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.

# def isLuckyPair(num1, num2):
#     str_num1 = str(num1)
#     str_num2 = str(num2)
#
#     if len(str_num1) == 4 and len(str_num2) == 4:
#         diff_rank = sum(1 for a, b in zip(str_num1, str_num2) if a != b)
#         if diff_rank == 2:
#             return True
#     return False
#
# new_list = []
# troyki_list = []
# with open('17-316.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print(new_list)
#
# sort_list = sorted(new_list)
# print(sort_list)
# min_sum = sort_list[0] + sort_list[1] + sort_list[2]
# print(min_sum)
#
# for i in range(len(new_list) - 2):
#     flag = 0
#     summ = 0
#     x_1 = new_list[i]
#     x_2 = new_list[i+1]
#     x_3 = new_list[i+2]
#
#     if isLuckyPair(x_1, x_2) or isLuckyPair(x_1, x_3) or isLuckyPair(x_3, x_2):
#         flag += 1
#     summ = x_1 + x_2 + x_3
#     if summ > min_sum:
#         flag += 1
#
#     if flag == 2:
#         troyki_list.append(summ)
#
#
# print(f"Count: {len(troyki_list)}")
# print(f"MaxSum: {max(troyki_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# 318)	(М. Шагитов) В файле 17-316.txt содержится последовательность целых чисел.
# Элементы последовательности – четырёхзначные натуральные числа.
# Назовём два различных четырёхзначных числа хорошей парой,
# если они имеют ровно одну общую цифру в каком-то из разрядов.
# Найдите все тройки элементов последовательности,
# в которых есть хотя бы одна хорошая пара,
# а сумма всех чисел тройки меньше максимальной
# суммы двух различных элементов последовательности.
# В ответе запишите количество найденных троек, затем минимальную
# из сумм элементов таких троек. В данной задаче под тройкой подразумевается
# три идущих подряд элемента последовательности.

# def isLuckyPair(num1, num2):
#     str_num1 = str(num1)
#     str_num2 = str(num2)
#
#     if len(str_num1) == 4 and len(str_num2) == 4:
#         diff_rank = sum(1 for a, b in zip(str_num1, str_num2) if a == b)
#         if diff_rank == 1:
#             return True
#     return False
#
# new_list = []
# troyki_list = []
# with open('17-316.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print(new_list)
#
# sort_list = sorted(new_list, reverse=True)
# print(sort_list)
# max_sum = sort_list[0] + sort_list[1] + sort_list[2]
# print(max_sum)
#
#
# for i in range(len(new_list) - 2):
#     flag = 0
#     summ = 0
#     x_1 = new_list[i]
#     x_2 = new_list[i+1]
#     x_3 = new_list[i+2]
#
#     if isLuckyPair(x_1, x_2) or isLuckyPair(x_1, x_3) or isLuckyPair(x_3, x_2):
#         flag += 1
#     summ = x_1 + x_2 + x_3
#     if summ < max_sum:
#         flag += 1
#
#     if flag == 2:
#         troyki_list.append(summ)
#
#
# print(f"Count: {len(troyki_list)}")
# print(f"MaxSum: {max(troyki_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#371)	В файле 17-370.txt содержится последовательность целых чисел, по модулю
# не превышающих 20000.  Определите количество пар элементов последовательности, в которых
#– только одно число четырёхзначное;
#– сумма квадратов элементов пары делится нацело на максимальное трёхзначное
# число в последовательности, сумма цифр которого оканчивается на 3.
#В ответе запишите сначала количество найденных пар, затем максимальную
# из сумм квадратов элементов таких пар. Под парой элементов подразумеваются
# два соседних элемента последовательности.

# tr_list = [i for i in new_list if len(str(i)) == 3]
# tr_end_list = [i for i in tr_list if i % 10 + i == ]
#
# result = (x_1**2 + x_2**2) //
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#371)	В файле 17-370.txt содержится последовательность
# целых чисел, по модулю не превышающих 20000.
# Определите количество пар элементов последовательности,
# в которых
#– только одно число четырёхзначное;
#– сумма квадратов элементов пары делится нацело на максимальное
# трёхзначное число в последовательности, сумма цифр которого оканчивается
# на 3.
# В ответе запишите сначала количество найденных пар,
# затем максимальную из сумм квадратов элементов таких пар.
# Под парой элементов подразумеваются два соседних элемента
# последовательности.

# new_list = []
# list_3_nubers = []
# max_list_3_numbers = []
# result = []
# with open('17-370.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print (new_list)
#
# true_3_numbers = 0
# for i in new_list:
#     if len(str(abs(i))) == 3:
#          list_3_nubers.append(i)
#
# print (f'Трехзначные: \n{list_3_nubers}')
#
# for x in list_3_nubers:
#     summa_chisel = (x % 10) + (x % 100 // 10) + (x // 100)
#     if summa_chisel % 10 == 3:
#         max_list_3_numbers.append(x)
#
# print (f'Трехзначные с отобранной суммой: \n{max_list_3_numbers}')
# max_3 = max(max_list_3_numbers)
# print (f'Максимальное: \n{max_3}')
#
# for i in range(len(new_list) - 1):
#     x_1 = new_list[i]
#     x_2 = new_list[i + 1]
#
#
#     pow_sum = x_1 ** 2 + x_2 ** 2
#     if (1000 <= abs(x_1) <= 9999) and not(1000 <= abs(x_2) <= 9999)\
#             or not(1000 <= abs(x_1) <= 9999) and (1000 <= abs(x_2) <= 9999):
#         if pow_sum % max_3 == 0:
#             result.append(pow_sum)
#             print("Pair:", x_1, "\t", x_2)
#
# print (f'Количество пар: \n{len(result)}')
# print (f'Результирующий массив: \n{result}')
# print (f'Максимальное: \n{max(result)}')
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
# 25 task
# Напишите программу, которая ищет среди целых чисел,
# принадлежащих числовому отрезку [174457; 174505], числа,
# имеющие ровно два различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти два делителя в таблицу на экране
# с новой строки в порядке возрастания произведения этих двух делителей.
# Делители в строке таблицы также должны следовать в порядке возрастания

# 1. целые числа
# 2. шестизначные, положительные
# 3. натуральные делители
# 4. различные
# 5. НЕ 1 НЕ число
# 6. Эти числа по списку
# 7. два делителя на экран в виде произведения
# 8.
# 4 5
# 2 3

# import math
# dives = []
# for number in range(174457, 174506):
#     end = int(math.sqrt(number))
#
#     for delitel in range(2, end + 1):
#         if number % delitel == 0:
#             if delitel == number // delitel:
#                 dives = dives + delitel
#             else:
#                 dives = dives + [delitel, number // delitel]
#             if len(dives) > 2:
#                 break
#     if len(dives) == 2:
#         print(dives)
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#337)	(И. Кушнир) В файле 17-336.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от 1 до 100 000 включительно.
# Обозначим через M максимальный элемент последовательности, кратный 37.
# Определите количество пар последовательности, в которых хотя бы одно число делится на M,
# а сумма элементов пары при делении на M дает в остатке число, большее 30.
# Гарантируется, что такая пара в последовательности есть.
# В ответе запишите количество найденных пар и минимальную сумму элементов среди таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента последовательности.

# new_list = []
# with open('17-316.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print (new_list)
#
#
# max_element = []
# M = 0
# for i in new_list:
#     if i % 37 == 0:
#         max_element.append(i)
# M = max(max_element)
# print(M)
#
# result_list = []
# k = 0
# for i in range(len(new_list) - 1):
#     x_1 = new_list[i]
#     x_2 = new_list[i+1]
#     if (x_1 % M == 0) or (x_2 % M == 0):
#         if (x_1 + x_2) % M > 30:
#             result_list.append(x_1 + x_2)
#             k += 1
# print (f"Количество пар: {k}")
# print (f"минимальную сумму элементов: {min(result_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#344)	(Е. Джобс) В файле 17-344.txt содержится последовательность целых чисел.
# Элементы последовательности – натуральные числа, не превосходящие 100000.
# Определите количество пар последовательности, в которых сумма чисел четна,
# а разница между числами кратна минимальному числу, кратному 103.
# Гарантируется, что элемент, кратный 103, в последовательности есть.
# В ответе запишите количество найденных пар, затем максимальную
# из сумм элементов таких пар. В данной задаче под парой подразумевается
# два идущих подряд элемента последовательности.

# new_list = []
# with open('17-344.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print (new_list)
#
#
# min_element = []
# M = 0
# for i in new_list:
#     if i % 103 == 0:
#         min_element.append(i)
# M = min(min_element)
# print(M)
#
# result_list = []
# for i in range(len(new_list) - 1):
#     x_1 = new_list[i]
#     x_2 = new_list[i+1]
#     summa = x_1 + x_2
#     division = x_1 - x_2
#     if summa % 2 == 0 and division % M == 0:
#             result_list.append(summa)
#     summa = 0
#     division = 0
#
#
# print (f"Количество пар: {len(result_list)}")
# print (f"Max сумму элементов: {max(result_list)}")
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________
#353)	(Е. Джобс) В файле 17-353.txt содержится последовательность натуральных чисел,
# не превышающих 10000. Симметричной парой называется такая пара чисел в заданной
# последовательности, элементы которой расположены на равном расстоянии от концов
# последовательности. Например, в последовательности 1 2 3 4 3 5 1 симметричными
# парами назовем пары (1, 1), (2, 5), (3, 3). Число 4 не образует пару, так как оно
# находится на равном удалении от краев, следовательно, это одно число, а не два.
# Найдите количество симметричных пар таких, что среднее арифметическое максимального
# и минимального значений последовательности строго меньше значения одного элемента пары
# и строго больше значения второго элемента пары.
# В качестве ответа запишите количество найденных пар и максимальную сумму
# элементов среди найденных пар.

# data = [int(x) for x in open('17-353.txt')]
# new_list = []
# with open('17-353.txt', 'r') as file:
#     for line in file:
#         new_list.append(int(line))
# print (new_list)
#
# average = (max(new_list) + min(new_list)) / 2
#
# result_list = []
# for i in range(len(new_list) // 2 + 1):
#     if i == len(new_list) // 2 and len(new_list) % 2 != 0:
#         break
#     x_1 = new_list[i]
#     x_2 = new_list[len(new_list) - 1 - i]
#
#     if (x_1 < average and x_2 > average) or (x_2 < average and x_1 > average) :
#             result_list.append(x_1 + x_2)
#
# print (f"Количество пар: {len(result_list)}")
# print (f"Max сумму элементов: {max(result_list)}")


#2120 14972
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________

#93)	(П. Волгин)  Рассматривается множество четных целых чисел,
# принадлежащих числовому отрезку [100; 1000], которые удовлетворяют следующим условиям:
#а) Число в шестнадцатеричной записи оканчивается цифрой «0»;
#б) Число не делится на 3.
#Найдите сумму таких чисел и их количество.
# В ответе запишите сначала сумму, а потом количество.

# list = [ i for i in range (100, 1001)]
#
# new_list = []
# for i in list:
#     hex_i = hex(i)[2:]
#     if hex_i[-1:] == '0' and i % 3 != 0:
#         new_list.append (i)
# print (sum(new_list))
# print (len(new_list))
#______________________________________________________________________________________________________________________
#______________________________________________________________________________________________________________________